use dep::curves::ed25519::fp::PrimeField as Fp;
use dep::curves::ed25519::tecurve::Point;

pub(crate) fn ed25519_basepoint() -> Point {
    let x = Fp::from_bytes(
        [
        26, 213, 37, 143, 96, 45, 86, 201, 178, 167, 37, 149, 96, 199, 44, 105, 92, 220, 214, 253, 49, 226, 164, 192, 254, 83, 110, 205, 211, 54, 105, 33
    ]
    );
    let y = Fp::from_bytes(
        [
        88, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102
    ]
    );
    let z = Fp::from_bytes([1, 0, 0, 0, 0]);
    let t = Fp::from_bytes(
        [
        163, 221, 183, 165, 179, 138, 222, 109, 245, 82, 81, 119, 128, 159, 240, 32, 125, 227, 171, 100, 142, 78, 234, 102, 101, 118, 139, 215, 15, 95, 135, 103
    ]
    );

    Point { x, y, z, t }
}

// X coordinate of the basepoint
// 15112221349535400772501151409588531511454012693041857206046113283949847762202
pub(crate) fn base_x_coordinate() -> Fp {
    Fp::from_bytes(
        [
        0x1a, 0xd5, 0x25, 0x8f, 0x60, 0x2d, 0x56, 0xc9, 0xb2, 0xa7, 0x25, 0x95, 0x60, 0xc7, 0x2c,
        0x69, 0x5c, 0xdc, 0xd6, 0xfd, 0x31, 0xe2, 0xa4, 0xc0, 0xfe, 0x53, 0x6e, 0xcd, 0xd3, 0x36,
        0x69, 0x21
    ]
    )
}

pub(crate) fn base_y_coordinate() -> Fp {
    Fp::from_bytes(
        [
        0x58, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
        0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66
    ]
    )
}

// Compressed Edwards Y form of 2*basepoint.
pub(crate) fn base2_compressed() -> Fp {
    Fp::from_bytes(
        [
        0xc9, 0xa3, 0xf8, 0x6a, 0xae, 0x46, 0x5f, 0xe, 0x56, 0x51, 0x38, 0x64, 0x51, 0x0f, 0x39,
        0x97, 0x56, 0x1f, 0xa2, 0xc9, 0xe8, 0x5e, 0xa2, 0x1d, 0xc2, 0x29, 0x23, 0x09, 0xf3, 0xcd,
        0x60, 0x22
    ]
    )
}

// Compressed Edwards Y form of 16*basepoint.
pub(crate) fn base16_compressed() -> Fp {
    Fp::from_bytes(
        [
        0xeb, 0x27, 0x67, 0xc1, 0x37, 0xab, 0x7a, 0xd8, 0x27, 0x9c, 0x07, 0x8e, 0xff, 0x11, 0x6a,
        0xb0, 0x78, 0x6e, 0xad, 0x3a, 0x2e, 0x0f, 0x98, 0x9f, 0x72, 0xc3, 0x7f, 0x82, 0xf2, 0x96,
        0x96, 0x70
    ]
    )
}

// 4493907448824000747700850167940867464579944529806937181821189941592931634714
pub(crate) fn test_scalar1() -> Fp {
    Fp::from_bytes(
        [
        0x1a, 0x0e, 0x97, 0x8a, 0x90, 0xf6, 0x62, 0x2d, 0x37, 0x47, 0x02, 0x3f, 0x8a, 0xd8,
        0x26, 0x4d, 0xa7, 0x58, 0xaa, 0x1b, 0x88, 0xe0, 0x40, 0xd1, 0x58, 0x9e, 0x7b, 0x7f,
        0x23, 0x76, 0xef, 0x09
    ]
    )
}

// 2506056684125797857694181776241676200180934651973138769173342316833279714961
pub(crate) fn test_scalar2() -> Fp {
    Fp::from_bytes(
        [
        0x91, 0x26, 0x7a, 0xcf, 0x25, 0xc2, 0x09, 0x1b, 0xa2, 0x17, 0x74, 0x7b, 0x66, 0xf0,
        0xb3, 0x2e, 0x9d, 0xf2, 0xa5, 0x67, 0x41, 0xcf, 0xda, 0xc4, 0x56, 0xa7, 0xd4, 0xaa,
        0xb8, 0x60, 0x8a, 0x05
    ]
    )
}

pub(crate) fn test_scalar1_times_bp() -> Fp {
    Fp::from_bytes(
        [
        0xea, 0x27, 0xe2, 0x60, 0x53, 0xdf, 0x1b, 0x59, 0x56, 0xf1, 0x4d, 0x5d, 0xec, 0x3c, 0x34,
        0xc3, 0x84, 0xa2, 0x69, 0xb7, 0x4c, 0xc3, 0x80, 0x3e, 0xa8, 0xe2, 0xe7, 0xc9, 0x42, 0x5e,
        0x40, 0xa5
    ]
    )
}

// test_scalar1 * test_scalar1_times_bp + test_scalar2 * basepoint
pub(crate) fn random_comp() -> Fp {
    Fp::from_bytes(
        [
        0x7d, 0xfd, 0x6c, 0x45, 0xaf, 0x6d, 0x6e, 0x0e, 0xba, 0x20, 0x37, 0x1a, 0x23, 0x64, 0x59,
        0xc4, 0xc0, 0x46, 0x83, 0x43, 0xde, 0x70, 0x4b, 0x85, 0x09, 0x6f, 0xfe, 0x35, 0x4f, 0x13,
        0x2b, 0x42
    ]
    )
}

pub(crate) fn basepoint_order() -> Fp {
    Fp::from_bytes(
        [
        0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde,
        0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x10
    ]
    )
}
